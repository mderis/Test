# .github/workflows/sync-pr-environment-labels.yml

name: Sync PR Environment Labels

on:
    push:
        branches:
            - 'deploy/**'
    pull_request:
        types:
            - synchronize

permissions:
    contents: read
    pull-requests: write
    issues: write

# To add a new environment, add a new entry to the LABEL_MAPPING.
# The key is the branch name (e.g., "deploy/production") and the value is the label to be applied (e.g., "prod env").
# The branch name should follow the 'deploy/**' pattern to trigger the workflow.
env:
    LABEL_MAPPING: >
        {
            "deploy/stage": "stage env",
            "deploy/test": "test env"
        }

jobs:
    sync-on-deploy:
        if: github.event_name == 'push'
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout full history
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Sync Labels
                uses: actions/github-script@v7
                with:
                    script: |
                        const { repo, ref_name } = github.context;
                        const labelMapping = JSON.parse(process.env.LABEL_MAPPING);
                        const labelToSync = labelMapping[ref_name];

                        if (!labelToSync) {
                            core.info(`No label mapping found for branch ${ref_name}. Exiting gracefully.`);
                            return;
                        }

                        core.info(`Syncing label: "${labelToSync}"`);

                        try {
                            await github.rest.issues.getLabel({ ...repo, name: labelToSync });
                        } catch (error) {
                            if (error.status === 404) {
                                core.info(`Label "${labelToSync}" does not exist. Creating it...`);
                                await github.rest.issues.createLabel({
                                    ...repo,
                                    name: labelToSync,
                                    color: "fbca04",
                                    description: "PR deployed to an environment",
                                });
                            } else {
                                throw error;
                            }
                        }

                        const { data: openPRs } = await github.rest.pulls.list({
                            ...repo,
                            state: 'open',
                        });

                        for (const pr of openPRs) {
                            core.info(`--- \nChecking PR #${pr.number}`);
                            const prLabels = pr.labels.map(label => label.name);
                            const hasLabel = prLabels.includes(labelToSync);

                            const isAncestor = await exec.getExecOutput(
                                'git', ['merge-base', '--is-ancestor', pr.head.sha, 'HEAD'],
                                { ignoreReturnCode: true }
                            ).then(res => res.exitCode === 0);

                            if (isAncestor) {
                                core.info(`Status: PR #${pr.number} is merged into ${ref_name}.`);
                                if (!hasLabel) {
                                    core.info(`Action: Adding label "${labelToSync}"...`);
                                    await github.rest.issues.addLabels({ ...repo, issue_number: pr.number, labels: [labelToSync] });
                                } else {
                                    core.info(`Action: No change needed. Label is already present.`);
                                }
                            } else {
                                core.info(`Status: PR #${pr.number} is NOT merged into ${ref_name}.`);
                                if (hasLabel) {
                                    core.info(`Action: Removing label "${labelToSync}"...`);
                                    await github.rest.issues.removeLabel({ ...repo, issue_number: pr.number, name: labelToSync });
                                } else {
                                    core.info(`Action: No change needed. Label is already absent.`);
                                }
                            }
                        }

    remove-on-pr-update:
        if: github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        steps:
            -   name: Remove All Deploy Labels
                uses: actions/github-script@v7
                with:
                    script: |
                        const { repo, issue } = github.context;
                        const pr = github.context.payload.pull_request;
                        const labelMapping = JSON.parse(process.env.LABEL_MAPPING);
                        const deployLabels = new Set(Object.values(labelMapping));
                        const prLabels = pr.labels.map(label => label.name);

                        const labelsToRemove = prLabels.filter(label => deployLabels.has(label));

                        if (labelsToRemove.length === 0) {
                            core.info("No deploy labels to remove.");
                            return;
                        }

                        core.info(`PR #${issue.number} was updated. Removing labels: ${labelsToRemove.join(', ')}`);

                        for (const label of labelsToRemove) {
                            await github.rest.issues.removeLabel({
                                ...repo,
                                issue_number: issue.number,
                                name: label,
                            });
                        }
